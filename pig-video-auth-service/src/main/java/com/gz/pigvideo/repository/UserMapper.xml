<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gz.pigvideo.repository.UserDao">
    <!-- User的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_User_Map" type="com.gz.pigvideo.domain.User">
        <id column="user_id" property="userId" />
        <result column="password" property="password" />
        <result column="roleId" property="roleId" />
        <result column="sex" property="sex" />
        <result column="name" property="name" />
        <result column="photo" property="photo" />
        <result column="create_date" property="createDate" />
        <result column="last_login_date" property="lastLoginDate" />
        <result column="delFlag" property="delFlag" />
        <result column="account" property="account" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:user的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="user_Column">
        user.user_id as user_id
        ,user.password as password
        ,user.roleId as roleId
        ,user.sex as sex
        ,user.name as name
        ,user.photo as photo
        ,user.create_date as create_date
        ,user.last_login_date as last_login_date
        ,user.delFlag as delFlag
        ,user.account as account
    </sql>

    <!--获得类名为:User对应的数据库表的数据总行数 -->
    <select id="getUserRowCount" parameterType="com.gz.pigvideo.common.Assist" resultType="java.lang.Long">
        select count(user_id) from user
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:User对应数据库中表的数据集合 -->
    <select id="selectUser" parameterType="com.gz.pigvideo.common.Assist"  resultMap="result_User_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="user_Column" /> 
            </otherwise>
        </choose>
        from user
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT user_id as primary_key FROM user
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=user.user_id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个User对象,以参数User对象中不为空的属性作为条件进行查询-->
    <select id="selectUserByObj" parameterType="com.gz.pigvideo.domain.User" resultMap="result_User_Map">
        select 
            <include refid="user_Column" /> 
        from user
        <where>
            <if test="account != null "> and user.account = #{account}</if>
            <if test="delFlag != null "> and user.delFlag = #{delFlag}</if>
            <if test="lastLoginDate != null "> and user.last_login_date = #{lastLoginDate}</if>
            <if test="createDate != null "> and user.create_date = #{createDate}</if>
            <if test="photo != null "> and user.photo = #{photo}</if>
            <if test="name != null "> and user.name = #{name}</if>
            <if test="sex != null "> and user.sex = #{sex}</if>
            <if test="roleId != null "> and user.roleId = #{roleId}</if>
            <if test="password != null "> and user.password = #{password}</if>
            <if test="userId != null "> and user.user_id = #{userId}</if>
        </where>
    </select> 

    <!-- 通过User的id获得对应数据库中表的数据对象-->
    <select id="selectUserById" parameterType="java.lang.Long" resultMap="result_User_Map">
        select 
            <include refid="user_Column" /> 
        from user
        where user.user_id = #{id}
    </select> 

    <!-- 将User插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertUser" parameterType="com.gz.pigvideo.domain.User">
        insert into user(user_id,password,roleId,sex,name,photo,create_date,last_login_date,delFlag,account) 
        values(#{userId},#{password},#{roleId},#{sex},#{name},#{photo},#{createDate},#{lastLoginDate},#{delFlag},#{account})
    </insert>

    <!-- 将User中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyUser" parameterType="com.gz.pigvideo.domain.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="password != null">password,</if>
            <if test="roleId != null">roleId,</if>
            <if test="sex != null">sex,</if>
            <if test="name != null">name,</if>
            <if test="photo != null">photo,</if>
            <if test="createDate != null">create_date,</if>
            <if test="lastLoginDate != null">last_login_date,</if>
            <if test="delFlag != null">delFlag,</if>
            <if test="account != null">account,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null"> #{userId},</if>
            <if test="password != null"> #{password},</if>
            <if test="roleId != null"> #{roleId},</if>
            <if test="sex != null"> #{sex},</if>
            <if test="name != null"> #{name},</if>
            <if test="photo != null"> #{photo},</if>
            <if test="createDate != null"> #{createDate},</if>
            <if test="lastLoginDate != null"> #{lastLoginDate},</if>
            <if test="delFlag != null"> #{delFlag},</if>
            <if test="account != null"> #{account},</if>
        </trim>
    </insert>

    <!-- 将User批量插入到对应数据库的表中-->
    <insert id="insertUserByBatch" parameterType="ArrayList">
        insert into user(user_id,password,roleId,sex,name,photo,create_date,last_login_date,delFlag,account) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.userId},#{item.password},#{item.roleId},#{item.sex},#{item.name},#{item.photo},#{item.createDate},#{item.lastLoginDate},#{item.delFlag},#{item.account})
        </foreach>
    </insert>

    <!-- 通过User的id将数据库表中对应的数据删除-->
    <delete id="deleteUserById" parameterType="java.lang.Long">
        delete from user
        where user_id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将User对应的数据库表的数据删除-->
    <delete id="deleteUser" parameterType="com.gz.pigvideo.common.Assist">
        delete from user
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过User的id将User的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateUserById" parameterType="com.gz.pigvideo.domain.User">
        update user set
            password=#{password}
            ,roleId=#{roleId}
            ,sex=#{sex}
            ,name=#{name}
            ,photo=#{photo}
            ,create_date=#{createDate}
            ,last_login_date=#{lastLoginDate}
            ,delFlag=#{delFlag}
            ,account=#{account}
        where user_id=#{userId}
    </update>

    <!-- 通过User的id将User中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyUserById" parameterType="com.gz.pigvideo.domain.User">
        update user
        <set>
            <if test="password != null">
                password=#{password},
            </if>
            <if test="roleId != null">
                roleId=#{roleId},
            </if>
            <if test="sex != null">
                sex=#{sex},
            </if>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="photo != null">
                photo=#{photo},
            </if>
            <if test="createDate != null">
                create_date=#{createDate},
            </if>
            <if test="lastLoginDate != null">
                last_login_date=#{lastLoginDate},
            </if>
            <if test="delFlag != null">
                delFlag=#{delFlag},
            </if>
            <if test="account != null">
                account=#{account},
            </if>
        </set>
        where user_id=#{userId}
    </update>

    <!-- 通过辅助工具Assist中的条件将User中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateUser" parameterType="map">
        update user
        <set>
                user_id=#{enti.userId},
                password=#{enti.password},
                roleId=#{enti.roleId},
                sex=#{enti.sex},
                name=#{enti.name},
                photo=#{enti.photo},
                create_date=#{enti.createDate},
                last_login_date=#{enti.lastLoginDate},
                delFlag=#{enti.delFlag},
                account=#{enti.account},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将User中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyUser" parameterType="map">
        update user
        <set>
            <if test="enti.userId != null">
                user_id=#{enti.userId},
            </if>
            <if test="enti.password != null">
                password=#{enti.password},
            </if>
            <if test="enti.roleId != null">
                roleId=#{enti.roleId},
            </if>
            <if test="enti.sex != null">
                sex=#{enti.sex},
            </if>
            <if test="enti.name != null">
                name=#{enti.name},
            </if>
            <if test="enti.photo != null">
                photo=#{enti.photo},
            </if>
            <if test="enti.createDate != null">
                create_date=#{enti.createDate},
            </if>
            <if test="enti.lastLoginDate != null">
                last_login_date=#{enti.lastLoginDate},
            </if>
            <if test="enti.delFlag != null">
                delFlag=#{enti.delFlag},
            </if>
            <if test="enti.account != null">
                account=#{enti.account},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>